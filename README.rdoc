== README

Web application built on Ruby on Rails with a restful JSON api. Jquery on the front end.

== Run Instuctions

* Clone repo
* cd into repo
* Run $ bundle install
* Run $ rake db:setup
* Run $ rails server

Server should set up to localhost:3000

== My Approach

First task was creating the database and loading the seed data. 
* I used a Ruby csv reader library to load the data directly from the csv file.
* I matched the csv files collumns to the collumns in the database for simplicity. 
* For the data base, I used the rails default SQLite database. It is a light weight SQL database that can easily handle a small data set.

Second task was creating my api to access the data. 
* I decided to go with a RESTful JSON api because it would make future scaling easier to implement and allows consumption by other applications. 
* I seperated my api controllers from the other controllers for readability.
* I used jbuilder to build my JSON response.

Third task was creating my front end and loading the data. 
* I decided on a simple Ajax call and then used JQuery to create my product list because the simplicity of the project didn't require anything more complicated than that. 
* I used JQuery to create my entire product and inventory list before appending it to my root element. This saves time on costly DOM manipulation.  
* I decided to attach everything to a root element to make it easier to attach a framework like React or Angular2 if this were to be made into a more complex application.

== Future Improvements

* Add a better loading screen.
* Turn the list of inventory into a compressed list that is filtered. Use dropdown selector to filter the list. Add options for ordering the list.
* Hide product details and create a click event for showing product details. 
* I would seperate my Ajax calls into one that gets all the products and their details and separate ones to get the inventory list for each product based on the click event. This would result in a reduction of initial load times but would increase load times when interacting with other parts of the application. 
* I built this in a way that would simplify switching to a front-end framework. If I wanted to add more features and more pages, I would use a framework like React. React helps making a large scale web application modular and scalable. It also makes dom manipulation very fast.
* If I wanted to make this more scalable on the back-end, I could use a more heavy weight relational database like Postgres in the non-development environment.
